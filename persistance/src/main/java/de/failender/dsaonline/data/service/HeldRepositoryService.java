// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.data.service;

import de.failender.dsaonline.data.dto.HeldWithVersion;
import de.failender.dsaonline.data.entity.HeldEntity;
import de.failender.dsaonline.data.entity.VersionEntity;
import de.failender.dsaonline.data.repository.HeldRepository;
import de.failender.dsaonline.exceptions.HeldNotFoundException;
import de.failender.dsaonline.security.SecurityUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigInteger;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class HeldRepositoryService {

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(HeldRepositoryService.class);
	@Autowired
	private VersionRepositoryService versionRepositoryService;
	@Autowired
	private HeldRepository heldRepository;
	@Autowired
	private SecurityUtils securityUtils;

	public void updateHeldenGruppe(Integer gruppeid, BigInteger heldid) {
		heldRepository.updateHeldenGruppe(gruppeid, heldid);
	}

	public HeldWithVersion findHeldWithLatestVersion(BigInteger heldid) {
		HeldEntity held = findHeld(heldid);
		return findHeldWithLatestVersion(held);
	}

	public HeldWithVersion findHeldWithLatestVersion(HeldEntity held) {
		VersionEntity versionEntity = versionRepositoryService.findLatestVersion(held);
		return new HeldWithVersion(held, versionEntity);
	}

	public List<HeldEntity> findByUserId(int userid) {
		return heldRepository.findByUserIdAndDeleted(userid, false).stream().filter(heldEntity -> securityUtils.canCurrentUserViewHeldBool(heldEntity)).collect(Collectors.toList());
	}

	public HeldEntity findHeld(BigInteger heldid) {
		Optional<HeldEntity> heldEntityOptional = heldRepository.findById(heldid);
		if (!heldEntityOptional.isPresent()) {
			log.error("Held with id {} could not be found", heldid);
			throw new HeldNotFoundException(heldid);
		}
		securityUtils.canCurrentUserViewHeld(heldEntityOptional.get());
		return heldEntityOptional.get();
	}

	public List<HeldEntity> findByGruppeId(Integer gruppeId) {
		return heldRepository.findByGruppeId(gruppeId).stream()
				.filter(held -> securityUtils.canCurrentUserViewHeldBool(held)).collect(Collectors.toList());
	}

	public List<HeldEntity> findByGruppeIdAndActiveIsTrue(Integer gruppeId) {
		return heldRepository.findByGruppeIdAndIsActiveIsTrue(gruppeId).stream()
				.filter(held -> securityUtils.canCurrentUserViewHeldBool(held)).collect(Collectors.toList());
	}



	public HeldEntity saveHeld(HeldEntity heldEntity) {
		securityUtils.canCurrentUserEditHeld(heldEntity);
		return heldRepository.save(heldEntity);
	}

	public void updateHeldenPublic(boolean isPublic, BigInteger heldid) {
		HeldEntity held = findHeld(heldid);
		securityUtils.canCurrentUserEditHeld(held);
		heldRepository.updateHeldenPublic(isPublic, heldid);
	}

	public void updateHeldenActive(boolean isActive, BigInteger heldid) {
		HeldEntity held = findHeld(heldid);
		securityUtils.canCurrentUserEditHeld(held);
		heldRepository.updateHeldenActive(isActive, heldid);
	}

	public List<HeldEntity> getHeldenForGruppe(int gruppeid) {
		return heldRepository.findByGruppeId(gruppeid);
	}

	public List<BigInteger> getAllHeldenIds() {
		return heldRepository.getAllHeldenIds();
	}

	public HeldEntity findHeldByNameAndGruppe(String name, Integer gruppeId) {
		HeldEntity heldEntity = heldRepository.findByNameAndGruppeId(name, gruppeId);
		securityUtils.canCurrentUserViewHeldBool(heldEntity);
		return heldEntity;
	}
}

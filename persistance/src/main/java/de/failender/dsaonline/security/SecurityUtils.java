// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.security;

import de.failender.dsaonline.data.entity.HeldEntity;
import de.failender.dsaonline.data.entity.UserEntity;
import de.failender.dsaonline.data.repository.UserRepository;
import de.failender.dsaonline.exceptions.NotAuthenticatedException;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class SecurityUtils {

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(SecurityUtils.class);
	public static final String CREATE_USER = "CREATE_USER";
	public static final String VIEW_ALL = "VIEW_ALL";
	public static final String EDIT_ALL = "EDIT_ALL";
	public static final String MEISTER = "MEISTER";
	public static final String EDIT_SCRIPTS = "EDIT_SCRIPTS";
	public static final String FULL_EXPORT = "FULL_EXPORT";
	public static final String FULL_IMPORT = "FULL_IMPORT";
	public static final String EDIT_KAMPAGNE = "EDIT_KAMPAGNE";

	public static final String ROLE_MEISTER = "Meister";

	private final UserRepository userRepository;


	public static SecurityUtils INSTANCE;

	public SecurityUtils(UserRepository userRepository) {
		this.userRepository = userRepository;
		INSTANCE = this;
	}

	public void checkRight(String right, int gruppeId) {
		if(checkIsUserMeisterForGruppeBool(gruppeId)) {
			return;
		}
		checkRight(right);
	}

	public static void checkRight(String right) {
		if (hasRight(right)) {
			return;
		}
		log.error("Access right not found " + right);
		for (StackTraceElement stackTraceElement : Thread.currentThread().getStackTrace()) {
			log.error(stackTraceElement.toString());
		}
		throw new AccessDeniedException(right);
	}

	public static boolean hasRight(String right) {
		Collection<? extends GrantedAuthority> authorities = SecurityContextHolder.getContext().getAuthentication().getAuthorities();
		Iterator<? extends GrantedAuthority> it = authorities.iterator();
		while (it.hasNext()) {
			GrantedAuthority grantedAuthority = it.next();
			if (grantedAuthority.getAuthority().equals(right)) {
				return true;
			}
		}
		return false;
	}

	public static List<String> getAuthorities() {
		checkLogin();
		return SecurityContextHolder.getContext().getAuthentication().getAuthorities().stream().map(auth -> auth.getAuthority()).collect(Collectors.toList());
	}

	public static void checkLogin() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof String) {
			throw new NotAuthenticatedException();
		}
	}

	public static boolean isLoggedIn() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof String) {
			return false;
		}
		return true;
	}

	public static UserEntity getCurrentUser() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof String) {
			throw new NotAuthenticatedException();
		} else {
			return (UserEntity) principal;
		}
	}

	public static Optional<UserEntity> getCurrentUserOptional() {
		Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		if (principal instanceof String) {
			return Optional.empty();
		} else {
			return Optional.of((UserEntity) principal);
		}
	}

	public static void checkIsHeldOfCurrentUser(HeldEntity heldEntity) {
		UserEntity userEntity = getCurrentUser();
		if(heldEntity.getUserId() != userEntity.getId()) {
			throw new AccessDeniedException("");
		}
	}

	public void canCurrentUserViewHeld(HeldEntity held) {
		if (held.isPublic()) {
			return;
		}
		UserEntity user = getCurrentUser();
		if (user.getId() == held.getUserId()) {
			return;
		}
		if (hasRight(SecurityUtils.VIEW_ALL)) {
			return;
		}
		checkIsUserMeisterForGruppe(held.getGruppe().getId());
//		throw new AccessDeniedException("Cant view held" + held.getName());
	}

	public void checkIsUserMeisterForGruppe(int gruppeid) {
		if (!checkIsUserMeisterForGruppeBool(gruppeid)) {
			throw new AccessDeniedException("");
		}
	}

	public boolean checkIsUserMeisterForGruppeBool(int gruppeid) {
		if (hasRight(SecurityUtils.EDIT_ALL)) {
			return true;
		}
		if (hasRight(SecurityUtils.MEISTER)) {
			UserEntity user = getCurrentUser();
			List<Integer> gruppen = userRepository.getMeisterGruppen(user.getId());
			if (gruppen.contains(gruppeid)) {
				return true;
			}
		}
		return false;
	}

	public void canCurrentUserEditHeld(HeldEntity held) {
		if(!canCurrentUserEditHeldBool(held)) {
			throw new AccessDeniedException("");
		}
	}

	public boolean canCurrentUserEditHeldBool(HeldEntity held) {
		if(!isLoggedIn()) {
			return false;
		}
		UserEntity user = getCurrentUser();
		if (user.getId() != held.getUserId()) {
			if (!checkIsUserMeisterForGruppeBool(held.getGruppe().getId())) {
				return hasRight(SecurityUtils.EDIT_ALL);
			}
		}
		return true;
	}

	public boolean canCurrentUserViewHeldBool(HeldEntity held) {
		try {
			canCurrentUserViewHeld(held);
			return true;
		} catch (RuntimeException e) {
			return false;
		}
	}
}

// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.scripting.helper;

import com.fasterxml.jackson.annotation.JsonRawValue;
import de.failender.dsaonline.scripting.ResultType;
import de.failender.dsaonline.scripting.ScriptService;
import jdk.nashorn.api.scripting.ScriptObjectMirror;
import org.springframework.stereotype.Component;
import java.util.ArrayList;
import java.util.List;

@Component
public class TableHelper extends ScriptHelper {
	@Override
	public String getName() {
		return "tableHelper";
	}

	@DocumentedMethod(description = "Baut aus einem Datensatz und der Konfiguration f√ºr die Spalten eine valide Tabellen-Konfiguration", returnDescription = "Eine fertige Tabellen-Konfiguration")
	public static TableResult buildResult(@DocumentedParameter(name = "data", description = "Der Datensatz der angezeigt wird") ScriptObjectMirror data, @DocumentedParameter(name = "spalten", description = "Die Konfiguration der Spalten (\'Feld1, Header1, Feld2, Header2\')") String... columns) {
		List<TableColumm> colummList = new ArrayList<>(columns.length / 2);
		for (int i = 0; i < columns.length; i += 2) {
			colummList.add(new TableColumm(columns[i], columns[i + 1]));
		}
		return new TableResult(colummList, ScriptService.stringify(data));
	}


	public static class TableResult {
		private List<TableColumm> columns;
		@JsonRawValue
		private String data;

		public ResultType getResultType() {
			return ResultType.Table;
		}


		public List<TableColumm> getColumns() {
			return this.columns;
		}


		public String getData() {
			return this.data;
		}


		public void setColumns(final List<TableColumm> columns) {
			this.columns = columns;
		}


		public void setData(final String data) {
			this.data = data;
		}

		@Override

		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof TableHelper.TableResult)) return false;
			final TableHelper.TableResult other = (TableHelper.TableResult) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$columns = this.getColumns();
			final Object other$columns = other.getColumns();
			if (this$columns == null ? other$columns != null : !this$columns.equals(other$columns)) return false;
			final Object this$data = this.getData();
			final Object other$data = other.getData();
			if (this$data == null ? other$data != null : !this$data.equals(other$data)) return false;
			return true;
		}


		protected boolean canEqual(final Object other) {
			return other instanceof TableHelper.TableResult;
		}

		@Override

		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $columns = this.getColumns();
			result = result * PRIME + ($columns == null ? 43 : $columns.hashCode());
			final Object $data = this.getData();
			result = result * PRIME + ($data == null ? 43 : $data.hashCode());
			return result;
		}

		@Override

		public java.lang.String toString() {
			return "TableHelper.TableResult(columns=" + this.getColumns() + ", data=" + this.getData() + ")";
		}


		public TableResult(final List<TableColumm> columns, final String data) {
			this.columns = columns;
			this.data = data;
		}
	}


	public static class TableColumm {
		private String field;
		private String header;


		public String getField() {
			return this.field;
		}


		public String getHeader() {
			return this.header;
		}


		public void setField(final String field) {
			this.field = field;
		}


		public void setHeader(final String header) {
			this.header = header;
		}

		@Override

		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof TableHelper.TableColumm)) return false;
			final TableHelper.TableColumm other = (TableHelper.TableColumm) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$field = this.getField();
			final Object other$field = other.getField();
			if (this$field == null ? other$field != null : !this$field.equals(other$field)) return false;
			final Object this$header = this.getHeader();
			final Object other$header = other.getHeader();
			if (this$header == null ? other$header != null : !this$header.equals(other$header)) return false;
			return true;
		}


		protected boolean canEqual(final Object other) {
			return other instanceof TableHelper.TableColumm;
		}

		@Override

		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $field = this.getField();
			result = result * PRIME + ($field == null ? 43 : $field.hashCode());
			final Object $header = this.getHeader();
			result = result * PRIME + ($header == null ? 43 : $header.hashCode());
			return result;
		}

		@Override

		public java.lang.String toString() {
			return "TableHelper.TableColumm(field=" + this.getField() + ", header=" + this.getHeader() + ")";
		}


		public TableColumm(final String field, final String header) {
			this.field = field;
			this.header = header;
		}
	}
}

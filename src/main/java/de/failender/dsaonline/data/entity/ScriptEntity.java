// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.data.entity;

import de.failender.dsaonline.scripting.ResultType;
import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "SCRIPTS")
public class ScriptEntity extends BaseEntity {
	@Column(name = "NAME")
	private String name;
	@Column(name = "OWNER")
	private Integer owner;
	@Enumerated(EnumType.ORDINAL)
	private ResultType resultType;
	private transient String body;
	@JoinColumn(name = "SCRIPT_ID")
	@OneToMany(cascade = CascadeType.ALL)
	private List<ScriptVariableEntity> scriptVariables;
	@Column(name = "SCRIPT_HELPER")
	private ArrayList<String> scriptHelper;


	public ScriptEntity() {
	}


	public String getName() {
		return this.name;
	}


	public Integer getOwner() {
		return this.owner;
	}


	public ResultType getResultType() {
		return this.resultType;
	}


	public String getBody() {
		return this.body;
	}


	public List<ScriptVariableEntity> getScriptVariables() {
		return this.scriptVariables;
	}


	public ArrayList<String> getScriptHelper() {
		return this.scriptHelper;
	}


	public void setName(final String name) {
		this.name = name;
	}


	public void setOwner(final Integer owner) {
		this.owner = owner;
	}


	public void setResultType(final ResultType resultType) {
		this.resultType = resultType;
	}


	public void setBody(final String body) {
		this.body = body;
	}


	public void setScriptVariables(final List<ScriptVariableEntity> scriptVariables) {
		this.scriptVariables = scriptVariables;
	}


	public void setScriptHelper(final ArrayList<String> scriptHelper) {
		this.scriptHelper = scriptHelper;
	}

	@Override

	public boolean equals(final Object o) {
		if (o == this) return true;
		if (!(o instanceof ScriptEntity)) return false;
		final ScriptEntity other = (ScriptEntity) o;
		if (!other.canEqual((Object) this)) return false;
		final Object this$name = this.getName();
		final Object other$name = other.getName();
		if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
		final Object this$owner = this.getOwner();
		final Object other$owner = other.getOwner();
		if (this$owner == null ? other$owner != null : !this$owner.equals(other$owner)) return false;
		final Object this$resultType = this.getResultType();
		final Object other$resultType = other.getResultType();
		if (this$resultType == null ? other$resultType != null : !this$resultType.equals(other$resultType)) return false;
		final Object this$scriptVariables = this.getScriptVariables();
		final Object other$scriptVariables = other.getScriptVariables();
		if (this$scriptVariables == null ? other$scriptVariables != null : !this$scriptVariables.equals(other$scriptVariables)) return false;
		final Object this$scriptHelper = this.getScriptHelper();
		final Object other$scriptHelper = other.getScriptHelper();
		if (this$scriptHelper == null ? other$scriptHelper != null : !this$scriptHelper.equals(other$scriptHelper)) return false;
		return true;
	}


	protected boolean canEqual(final Object other) {
		return other instanceof ScriptEntity;
	}

	@Override

	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final Object $name = this.getName();
		result = result * PRIME + ($name == null ? 43 : $name.hashCode());
		final Object $owner = this.getOwner();
		result = result * PRIME + ($owner == null ? 43 : $owner.hashCode());
		final Object $resultType = this.getResultType();
		result = result * PRIME + ($resultType == null ? 43 : $resultType.hashCode());
		final Object $scriptVariables = this.getScriptVariables();
		result = result * PRIME + ($scriptVariables == null ? 43 : $scriptVariables.hashCode());
		final Object $scriptHelper = this.getScriptHelper();
		result = result * PRIME + ($scriptHelper == null ? 43 : $scriptHelper.hashCode());
		return result;
	}

	@Override

	public java.lang.String toString() {
		return "ScriptEntity(name=" + this.getName() + ", owner=" + this.getOwner() + ", resultType=" + this.getResultType() + ", body=" + this.getBody() + ", scriptVariables=" + this.getScriptVariables() + ", scriptHelper=" + this.getScriptHelper() + ")";
	}
}

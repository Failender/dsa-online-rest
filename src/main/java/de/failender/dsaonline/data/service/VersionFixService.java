// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.data.service;

import de.failender.dsaonline.data.entity.VersionEntity;
import de.failender.dsaonline.data.repository.VersionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import javax.annotation.PostConstruct;
import java.math.BigInteger;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class VersionFixService {

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(VersionFixService.class);
	@Autowired
	private VersionRepository versionRepository;

	@PostConstruct
	public void postconstruct() {
		fixVersions();
	}

	public void fixVersions() {
		Map<BigInteger, List<VersionEntity>> groupedVersions = versionRepository.findAll().stream().collect(Collectors.groupingBy(VersionEntity::getHeldid));
		outer:
		for (Map.Entry<BigInteger, List<VersionEntity>> bigIntegerListEntry : groupedVersions.entrySet()) {
			Map<Integer, List<VersionEntity>> groupedVersionsByVersion = bigIntegerListEntry.getValue().stream().collect(Collectors.groupingBy(VersionEntity::getVersion));
			for (Map.Entry<Integer, List<VersionEntity>> integerListEntry : groupedVersionsByVersion.entrySet()) {
				if (integerListEntry.getValue().size() != 1) {
					fixVersions(bigIntegerListEntry.getValue());
					continue outer;
				}
			}
		}
	}

	private void fixVersions(List<VersionEntity> versions) {
		log.error("Fixing versions for held {}", versions.get(0).getHeldid());
		versions = versions.stream().sorted(Comparator.comparingLong(version -> version.getCreatedDate().getTime())).collect(Collectors.toList());
		Iterator<VersionEntity> iterator = versions.iterator();
		Date preDate = null;
		int i = 1;
		while (iterator.hasNext()) {
			VersionEntity versionEntity = iterator.next();
			if (preDate != null && versionEntity.getCreatedDate().getTime() == preDate.getTime()) {
				versionRepository.delete(versionEntity);
				iterator.remove();
				continue;
			}
			preDate = versionEntity.getCreatedDate();
			versionEntity.setVersion(i);
			i++;
		}
		versionRepository.saveAll(versions);
	}
}

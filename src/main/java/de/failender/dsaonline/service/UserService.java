// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.service;

import de.failender.dsaonline.data.entity.GruppeEntity;
import de.failender.dsaonline.data.entity.UserEntity;
import de.failender.dsaonline.data.repository.GruppeRepository;
import de.failender.dsaonline.data.repository.UserRepository;
import de.failender.dsaonline.exceptions.GroupNotFoundException;
import de.failender.dsaonline.exceptions.UserAlreadyExistsException;
import de.failender.dsaonline.rest.dto.UserData;
import de.failender.dsaonline.rest.dto.UserRegistration;
import de.failender.dsaonline.security.SecurityUtils;
import org.springframework.stereotype.Service;
import javax.validation.ValidationException;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

@Service
public class UserService {

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(UserService.class);
	private final UserRepository userRepository;
	private final GruppeRepository gruppeRepository;
	private final UserHeldenService userHeldenService;

	public UserService(UserRepository userRepository, GruppeRepository gruppeRepository, UserHeldenService userHeldenService) {
		this.userRepository = userRepository;
		this.gruppeRepository = gruppeRepository;
		this.userHeldenService = userHeldenService;
	}

	public UserEntity registerUser(UserRegistration userRegistration) {
		SecurityUtils.checkRight(SecurityUtils.CREATE_USER);
		if (userRegistration.getName() == null || userRegistration.getGruppe() == null) {
			throw new ValidationException();
		}
		if (this.userRepository.existsByName(userRegistration.getName())) {
			throw new UserAlreadyExistsException();
		}
		GruppeEntity gruppeEntity = gruppeRepository.findByName(userRegistration.getGruppe());
		if (gruppeEntity == null) {
			gruppeEntity = new GruppeEntity();
			gruppeEntity.setName(userRegistration.getGruppe());
			gruppeRepository.save(gruppeEntity);
		}
		UserEntity userEntity = new UserEntity();
		userEntity.setGruppe(gruppeEntity);
		userEntity.setName(userRegistration.getName());
		userEntity.setToken(userRegistration.getToken());
		if (userRegistration.getPassword() != null && !userRegistration.getPassword().isEmpty()) {
			userEntity.setPassword(userRegistration.getPassword());
		}
		userEntity = this.userRepository.save(userEntity);
		userHeldenService.forceUpdateHeldenForUser(userEntity);
		userHeldenService.updateHeldenForUser(userEntity, true);
		return userEntity;
	}

	public void addUserRole(UserEntity user, String role) {
		Integer roleId = this.userRepository.getRoleId(role);
		if (roleId == null) {
			log.error("Cant find role {} for user {}", role, user.getName());
			return;
		}
		this.userRepository.addUserRole(roleId, user.getId());
	}

	public int createUsers(List<UserData> data) {
		AtomicInteger imports = new AtomicInteger(0);
		data.forEach(userData -> {
			log.info("Processing user {}", userData.getName());
			if (userRepository.existsByName(userData.getName())) {
				log.info("User with Name {} already exists in database", userData.getName());
				return;
			}
			String gruppe;
			if (userData.getGruppe() != null) {
				gruppe = userData.getGruppe();
			} else {
				gruppe = this.gruppeRepository.findAll().get(0).getName();
			}
			UserRegistration userRegistration = new UserRegistration(userData.getName(), userData.getPassword(), userData.getToken(), gruppe);
			UserEntity userEntity = registerUser(userRegistration);
			if (userData.roles != null) {
				userData.roles.forEach(role -> addUserRole(userEntity, role));
			}
			if (userData.meister != null) {
				userData.meister.forEach(gruppeName -> {
					GruppeEntity gruppeEntity = gruppeRepository.findByName(gruppeName);
					userRepository.addMeisterForGruppe(userEntity.getId(), gruppeEntity.getId());
				});
			}
			imports.incrementAndGet();
		});
		return imports.get();
	}
}

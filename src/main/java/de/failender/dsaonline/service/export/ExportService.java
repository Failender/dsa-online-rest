// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.service.export;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import de.failender.dsaonline.data.entity.GruppeEntity;
import de.failender.dsaonline.data.entity.HeldEntity;
import de.failender.dsaonline.data.entity.VersionEntity;
import de.failender.dsaonline.data.repository.AbenteuerRepository;
import de.failender.dsaonline.data.repository.GruppeRepository;
import de.failender.dsaonline.data.repository.HeldRepository;
import de.failender.dsaonline.data.repository.UserRepository;
import de.failender.dsaonline.data.service.HeldRepositoryService;
import de.failender.dsaonline.data.service.VersionRepositoryService;
import de.failender.dsaonline.exceptions.HeldNotFoundException;
import de.failender.dsaonline.rest.dto.UserData;
import de.failender.dsaonline.rest.views.UserView;
import de.failender.dsaonline.security.SecurityUtils;
import de.failender.dsaonline.service.AbenteuerService;
import de.failender.dsaonline.service.UserService;
import de.failender.dsaonline.util.VersionService;
import de.failender.heldensoftware.api.HeldenApi;
import de.failender.heldensoftware.api.requests.ReturnHeldXmlRequest;
import org.apache.commons.io.IOUtils;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import javax.persistence.EntityManager;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;
import static org.apache.commons.io.IOUtils.copy;

@Service
public class ExportService {

	private final GruppeRepository gruppeRepository;
	private final ObjectMapper objectMapper;
	private final List<ExportAdapter> exportAdapters;

    public ExportService(GruppeRepository gruppeRepository, ObjectMapper objectMapper, List<ExportAdapter> exportAdapters) {
		this.gruppeRepository = gruppeRepository;
		this.objectMapper = objectMapper;
		this.exportAdapters = exportAdapters;
        File file = new File("temp");
		if (!file.exists()) {
			file.mkdir();
		}
		file.deleteOnExit();
	}

	public void provideFullImport(InputStream is) {
		SecurityUtils.checkRight(SecurityUtils.FULL_IMPORT);
		try {
			File file = new File("temp", UUID.randomUUID().toString());
			file.deleteOnExit();
			copy(is, new FileOutputStream(file));
			ZipFile zipFile = new ZipFile(file);
			Map<Integer, Integer> groupMapping = importGruppen(zipFile);
            for (ExportAdapter exportAdapter : exportAdapters) {
                exportAdapter.doImport(groupMapping, zipFile);
            }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private Map<Integer, Integer> importGruppen(ZipFile file) throws IOException {
		ZipEntry entry = file.getEntry("gruppen.json");
		InputStream is = file.getInputStream(entry);
		Map<Integer, Integer> mapping = new HashMap<>();
		List<GruppeEntity> gruppeEntities = objectMapper.readValue(is, new TypeReference<List<GruppeEntity>>() {
		});
		for (GruppeEntity gruppeEntity : gruppeEntities) {
			if (gruppeRepository.existsByName(gruppeEntity.getName())) {
				mapping.put(gruppeEntity.getId(), gruppeRepository.findByName(gruppeEntity.getName()).getId());
				continue;
			}
			int oldId = gruppeEntity.getId();
			gruppeEntity.setId(null);
			gruppeEntity = gruppeRepository.save(gruppeEntity);
			mapping.put(oldId, gruppeEntity.getId());
		}
		return mapping;
	}

	public void provideFullExport(HttpServletResponse response) {
		SecurityUtils.checkRight(SecurityUtils.FULL_EXPORT);
		try {
			response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
			String fileName = "export.zip";
			response.setHeader("Content-disposition", "attachment; filename=" + fileName);
			doExport(response.getOutputStream());

		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}

	public void doExport(OutputStream os) throws IOException {
		ZipOutputStream zos = new ZipOutputStream(os);
		for (ExportAdapter exportAdapter : exportAdapters) {
			exportAdapter.export(zos);
		}
		exportGruppen(zos);
		zos.close();
	}

	private void exportGruppen(ZipOutputStream zos) throws IOException {
		zos.putNextEntry(new ZipEntry("gruppen.json"));
		zos.write(objectMapper.writeValueAsBytes(gruppeRepository.findAll()));
		zos.closeEntry();

	}
}

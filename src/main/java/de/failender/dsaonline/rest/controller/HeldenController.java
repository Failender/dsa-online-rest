// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.rest.controller;

import de.failender.dsaonline.data.entity.FavTalentEntity;
import de.failender.dsaonline.rest.dto.*;
import de.failender.dsaonline.security.AuthorizationService;
import de.failender.dsaonline.security.RestAuthentication;
import de.failender.dsaonline.security.SecurityUtils;
import de.failender.dsaonline.service.HeldenService;
import de.failender.dsaonline.service.UserHeldenService;
import de.failender.dsaonline.util.VersionService;
import org.apache.commons.io.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletResponse;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("api/helden")
public class HeldenController {

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(HeldenController.class);
	@Autowired
	private HeldenService heldenService;
	@Autowired
	private UserHeldenService userHeldenService;
	@Autowired
	private VersionService versionService;

	@Autowired
	private AuthorizationService authorizationService;

	@GetMapping
	public List<HeldenInfo> getAllHeldenForCurrentUser() {
		return heldenService.getAllHeldenForCurrentUser();
	}

	@GetMapping("held/{id}/version/{version}")
	public DatenAndEditable getHeldenDaten(@PathVariable BigInteger id, @PathVariable int version) {
		return heldenService.getHeldenDaten(id, version);
	}

	@GetMapping("held/differences/{heldenid}/{from}/{to}")
	public Differences calculateDifferences(@PathVariable BigInteger heldenid, @PathVariable int from, @PathVariable int to) {
		return this.heldenService.calculateDifferences(heldenid, from, to);
	}

	@GetMapping("held/versionen/{heldenid}")
	public List<HeldVersion> loadHeldenVersionen(@PathVariable BigInteger heldenid) {
		return heldenService.loadHeldenVersionen(heldenid);
	}

	@GetMapping("held/pdf/{id}/{version}")
	public void providePdfDownload(@PathVariable BigInteger id, @PathVariable int version, HttpServletResponse response) throws FileNotFoundException {
		heldenService.providePdfDownload(id, version, response);
	}

	@GetMapping("reload")
	public List<HeldenInfo> reloadHelden() {
		userHeldenService.forceUpdateHeldenForUser(SecurityUtils.getCurrentUser(), true);
		return heldenService.getAllHeldenForCurrentUser();
	}

	@PostMapping("{heldid}/upload")
	public List<String> uploadVersion(@RequestParam("file") MultipartFile[] file, @PathVariable BigInteger heldid) throws IOException {
		List<String> messages = new ArrayList<>();
		for (MultipartFile multipartFile : file) {
			String xml = IOUtils.toString(multipartFile.getInputStream(), "UTF-8");
			String value = versionService.saveHeld(heldid, xml);
			if(value != null) {
				messages.add(value);
			}
		}
		if(messages.size() == 0) {
			messages.add("Alle Versionen erfolgreich angelegt");
		}
		return messages;
	}

	@PostMapping("public/{heldid}/{isPublic}")
	public void editPublic(@PathVariable BigInteger heldid, @PathVariable boolean isPublic) {
		heldenService.updateHeldenPublic(isPublic, heldid);
	}

	@PostMapping("active/{heldid}/{isActive}")
	public void editActive(@PathVariable BigInteger heldid, @PathVariable boolean isActive) {
		heldenService.updateHeldenActive(isActive, heldid);
	}

	@GetMapping("download/{heldid}/xml")
	public void downloadXml(@PathVariable BigInteger heldid, HttpServletResponse response, RestAuthentication authentication) {
		authorizationService.authenticate(authentication);
		heldenService.provideXmlFullDownload(heldid, response);
	}

	@DeleteMapping("held/{heldid}/version/{version}")
	public void deleteVersion(@PathVariable BigInteger heldid, @PathVariable int version) {
		heldenService.deleteVersion(heldid, version);
	}

	@GetMapping("held/{heldid}/inventar")
	public List<Gegenstand> getInventar(@PathVariable BigInteger heldid) {
		return heldenService.getInventar(heldid);
	}

	@DeleteMapping("held/{heldid}/inventar/{index}")
	public List<Gegenstand> deleteItem(@PathVariable BigInteger heldid, @PathVariable int index) {
		return heldenService.deleteItem(heldid, index);
	}

	@PostMapping("held/{heldid}/inventar/add/{name}/{amount}")
	public List<Gegenstand> addItem(@PathVariable BigInteger heldid, @PathVariable String name, @PathVariable int amount) {
		return heldenService.addItem(heldid, name, amount);
	}

	@GetMapping("held/{heldid}/lagerorte")
	public List<Lagerort> getLagerorte(@PathVariable BigInteger heldid) {
		return heldenService.getLagerorte(heldid);
	}

	@PostMapping("held/{heldid}/lagerort")
	public List<Lagerort> addLagerort(@PathVariable BigInteger heldid, @RequestBody Lagerort lagerort) {
		return heldenService.addLagerort(heldid, lagerort.getName(), lagerort.getNotizen());
	}

	@PostMapping("held/lagerort/{lagerort}/notiz")
	public void updateLagerortNotiz(@PathVariable int lagerort, @RequestBody String notiz) {
		heldenService.updateLagerortNotiz(lagerort, notiz);
	}

	@PostMapping("held/{heldid}/lagerort/{to}/{gegenstand}/{amount}")
	public void setLagerort(@PathVariable BigInteger heldid, @RequestParam(required = false) String from, @PathVariable String to, @PathVariable String gegenstand, @PathVariable int amount) {
		heldenService.setLagerort(heldid, from, to, gegenstand, amount);
	}

	@PostMapping("held/{heldid}/favoriten")
	public void addFavorit(@PathVariable BigInteger heldid, @RequestParam String name) {
		heldenService.addFavorisiertesTalent(name, heldid);
	}

	@DeleteMapping("held/{heldid}/favoriten/")
	public void deleteFavorit(@PathVariable BigInteger heldid, @RequestParam String name) {
		heldenService.removeFavorisiertesTalent(name, heldid);
	}

	@GetMapping("held/{heldid}/favoriten")
	public List<String> getFavorisierteTalente(@PathVariable BigInteger heldid) {
		return heldenService.getFavorisierteTalente(heldid);
	}

	@GetMapping("held/{heldid}/favoriten/list")
	public List<Object> getFavoriten(@PathVariable BigInteger heldid) {
		return heldenService.getFavoriten(heldid);
	}


}

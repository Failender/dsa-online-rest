// Generated by delombok at Thu Nov 22 18:54:11 CET 2018
package de.failender.dsaonline.rest.controller;

import de.failender.dsaonline.data.entity.HeldEntity;
import de.failender.dsaonline.data.repository.GruppeRepository;
import de.failender.dsaonline.data.repository.UserRepository;
import de.failender.dsaonline.data.service.HeldRepositoryService;
import de.failender.dsaonline.rest.dto.DropdownData;
import de.failender.dsaonline.rest.dto.GruppeIncludingHelden;
import de.failender.dsaonline.rest.dto.GruppeInfo;
import de.failender.dsaonline.security.SecurityUtils;
import de.failender.dsaonline.service.GruppenService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.math.BigInteger;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("api/gruppen")
public class GruppenController {

    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(GruppenController.class);
    @Autowired
    private GruppeRepository gruppeRepository;
    @Autowired
    private HeldRepositoryService heldRepositoryService;
    @Autowired
    private UserRepository userRepository;
    @Autowired
    private SecurityUtils securityUtils;
    private final GruppenService gruppenService;

    public GruppenController(GruppenService gruppenService) {
        this.gruppenService = gruppenService;
    }

    @GetMapping
    public List<DropdownData> getAllGruppen(@RequestParam(value = "meisterinfo", defaultValue = "false") boolean appendMeisterInfo) {
        if (appendMeisterInfo) {
            Optional<Integer> groupIdOpt = SecurityUtils.getCurrentUserOptional().map(user -> user.getGruppe().getId());
            return this.gruppeRepository.findAll().stream().map(
                    gruppe -> new DropdownData(gruppe.getName(), new GruppeInfo(gruppe.getName(), gruppe.getId(), securityUtils.checkIsUserMeisterForGruppeBool(gruppe.getId()), groupIdOpt.map(id -> id == gruppe.getId()).orElse(false), gruppe.getImage()))).collect(Collectors.toList());
        } else {
            return this.gruppeRepository.findAll().stream().map(gruppe -> new DropdownData(gruppe.getName(), gruppe.getId())).collect(Collectors.toList());
        }
    }

    @GetMapping("editable/meister")
    public List<DropdownData> getAllGruppenWhereCurrentUserCanEditMeister() {
        if (SecurityUtils.hasRight(SecurityUtils.EDIT_ALL)) {
            return gruppeRepository.findAll().stream().map(gruppe -> new DropdownData(gruppe.getName(), gruppe.getId())).collect(Collectors.toList());
        }
        return this.userRepository.getMeisterGruppen(SecurityUtils.getCurrentUser().getId()).stream().map(id -> gruppeRepository.findById(id).get()).map(gruppe -> new DropdownData(gruppe.getName(), gruppe.getId())).collect(Collectors.toList());
    }

    @PostMapping("{heldid}/{gruppeid}")
    public void editHeldenGruppe(@PathVariable BigInteger heldid, @PathVariable Integer gruppeid) {
        HeldEntity heldEntity = this.heldRepositoryService.findHeld(heldid);
        this.heldRepositoryService.updateHeldenGruppe(gruppeid, heldid);
    }

    @GetMapping("{groupid}/includeHelden")
    public GruppeIncludingHelden getGruppeIncludingHelden(@PathVariable int groupid, @RequestParam("publicOnly") boolean publicOnly, @RequestParam("showInactive") boolean showInactive) {
        return gruppenService.getGruppeIncludingHelden(groupid, publicOnly, showInactive);
    }

    @GetMapping("includeHelden")
    public Collection<GruppeIncludingHelden> getGruppenIncludingHelden(@RequestParam("publicOnly") boolean publicOnly, @RequestParam("showInactive") boolean showInactive) {
        return gruppenService.getGruppenIncludingHelden(publicOnly, showInactive);
    }

    @GetMapping("helden/{gruppeid}")
    public List<? extends Object> getHeldenForGruppe(@PathVariable int gruppeid, @RequestParam boolean dropdown,
                                                     @RequestParam(value = "showInactive", defaultValue = "false") boolean showInactive) {
        List<HeldEntity> helden;
        if(showInactive) {
            helden = heldRepositoryService.findByGruppeId(gruppeid);
        } else {
            helden = heldRepositoryService.findByGruppeIdAndActiveIsTrue(gruppeid);
        }
        if (dropdown) {
            return helden.stream()
                    .map(held -> new DropdownData(held.getName(), held)).collect(Collectors.toList());
        }
        return helden;
    }

    @PostMapping("{gruppeid}/datum/{datum}")
    public void updateGruppeDatum(@PathVariable int gruppeid, @PathVariable int datum) {
        this.gruppenService.updateGruppeDatum(gruppeid, datum);
    }

    @PostMapping("{gruppeid}/image/")
    public void updateGruppeImage(@PathVariable int gruppeid, @RequestBody String image) {
        this.gruppenService.updateGruppeImage(gruppeid, image);
    }
}
